import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.*;
import java.util.concurrent.TimeUnit;
import com.opencsv.exceptions.CsvValidationException;

public class BuildDatasetUI extends JFrame {
    private static final long serialVersionUID = 1L;

	private JTextArea textArea;
    
    // File paths (these will be updated by the user's selections)
    private String samplePath;
    private String csvPath;
    private String jsonPath;
    private String xlsxPath;

    public BuildDatasetUI() {
        setTitle("Dataset Builder");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Initialize JTextArea
        textArea = new JTextArea();
        textArea.setEditable(false);
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));

        // Wrap the JTextArea inside a JScrollPane
        JScrollPane scrollPane = new JScrollPane(textArea);
        getContentPane().add(scrollPane, BorderLayout.CENTER);

        // Panel for buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(4, 2));

        // Add buttons for selecting directories
        JButton selectSampleButton = new JButton("Select Sample File");
        JButton selectCSVButton = new JButton("Select CSV File");
        JButton selectJSONButton = new JButton("Select JSON Output");
        JButton selectXLSXButton = new JButton("Select XLSX Output");
        JButton startButton = new JButton("Start Processing");

        buttonPanel.add(selectSampleButton);
        buttonPanel.add(selectCSVButton);
        buttonPanel.add(selectJSONButton);
        buttonPanel.add(selectXLSXButton);
        buttonPanel.add(startButton);

        getContentPane().add(buttonPanel, BorderLayout.SOUTH);

        // Action listeners for buttons
        selectSampleButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                samplePath = selectDirectory("Select Sample File");
            }
        });
        
        selectCSVButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                csvPath = selectDirectory("Select CSV File");
            }
        });

        selectJSONButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                jsonPath = selectDirectory("Select JSON Output");
            }
        });

        selectXLSXButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                xlsxPath = selectDirectory("Select XLSX Output");
            }
        });

        // Start the process when clicked
        startButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (samplePath == null || csvPath == null || jsonPath == null || xlsxPath == null) {
                    updateTextArea("Please select all file paths before starting.");
                    return;
                }
                startProcessing();
            }
        });
    }

    // Method to allow the user to select a directory using JFileChooser
    private String selectDirectory(String dialogTitle) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(dialogTitle);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            return selectedFile.getAbsolutePath();
        }
        return null;  // Return null if no file is selected
    }

    // Method to display messages in the text area
    private void updateTextArea(String message) {
        textArea.append(message + "\n");
        textArea.setCaretPosition(textArea.getDocument().getLength());  // Auto-scroll to the end
    }

    private void startProcessing() {
        // Start the process in a separate thread to prevent UI freeze
        new Thread(() -> {
            try {
                BuildDataset mainClass = new BuildDataset();
                updateTextArea("Processing started...");
                
                long startNs = System.nanoTime();

                // Extract blocks and convert CSV to JSON
                BlocksExtractor.extractBlocks(samplePath);
                JsonBuilder.convertCSVToJSON();
                
                long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);
                updateTextArea("Done, took " + durationMs + "ms");

                // Trigger CSV Viewer
                triggerCSVViewer();

            } catch (IOException | CsvValidationException e) {
                updateTextArea("Error: " + e.getMessage());
            }
        }).start();
    }

    // Method to trigger CSV viewer
    private void triggerCSVViewer() {
        // Create the CSV Viewer JFrame
        JFrame frame = new JFrame("CSV Viewer");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // Read CSV file and get data
        String[][] data = readCSV(csvPath);

        // Column names (modify based on CSV file)
        String[] columns = {"Column 1", "Column 2", "Column 3", "Column 4", "Column 5", "Column 6", "Column 7", "Column 8", "Column 9", "Column 10", "Column 11"};

        // Create a DefaultTableModel with the data
        DefaultTableModel model = new DefaultTableModel(data, columns);

        // Create a JTable with the model
        JTable table = new JTable(model);

        // Add the table to a JScrollPane
        JScrollPane scrollPane = new JScrollPane(table);
        frame.add(scrollPane);

        // Set the size and make the frame visible
        frame.setSize(1080, 720);
        frame.setVisible(true);
    }

    // Method to read the CSV file and return the data as a 2D array
    public static String[][] readCSV(String filePath) {
        List<String[]> dataList = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;

            // Read each line from the file
            while ((line = br.readLine()) != null) {
                // Split the line by commas and add it to the data list
                String[] data = line.split(",");
                dataList.add(data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Convert the list to a 2D array
        return dataList.toArray(new String[0][0]);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            BuildDatasetUI frame = new BuildDatasetUI();
            frame.setVisible(true);
        });
    }
}
