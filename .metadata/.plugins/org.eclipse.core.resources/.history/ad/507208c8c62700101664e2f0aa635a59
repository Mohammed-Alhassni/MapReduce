public class Reducer {
    private static final Object lock = new Object();  // Lock object to synchronize file writing

    public static void reduce(Map<String, Object> classAndFeatures) throws FileNotFoundException, IOException {
        String samplePath = "output.csv"; // Path for the output CSV
        String className = null;
        File file = new File(samplePath);

        // Get the class name and features map from the input
        Set<String> classNameSet = classAndFeatures.keySet();
        for (String setElement : classNameSet) {
            className = setElement;
        }

        Map<String, String> featuresMap = (Map<String, String>) classAndFeatures.get(className);
        ArrayList<String> featureMapKeys = new ArrayList<>(featuresMap.keySet());

        // Write header only once in the main thread before threading starts
        if (!file.exists()) {
            try (FileWriter writer = new FileWriter(file)) {
                System.out.println("New 'output.csv' has been created");

                // Write header
                writer.append("class");
                for (String key : featureMapKeys) {
                    writer.append(",").append(key);
                }
                writer.append("\n");

                System.out.println("Header added");
            }
        }

        // Append rows using synchronized block to avoid race conditions
        synchronized (lock) {
            try (FileWriter writer = new FileWriter(file, true)) {
                writer.append(className);
                for (String key : featureMapKeys) {
                    writer.append(",").append(featuresMap.get(key));
                }
                writer.append("\n");

                System.out.println("Row added");
            }
        }
    }
}


