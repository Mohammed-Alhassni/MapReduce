import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.*;

public class Sample3Tester {

    private static final String INPUT_PATH = "SAMPLE3.txt";
    private static final String OUTPUT_PATH = "output.csv";
    private static final Object LOCK = new Object();

    public static void main(String[] args) throws IOException, InterruptedException {
        List<ClassBlock> classBlocks = parseInputFile(INPUT_PATH);

        ExecutorService executor = Executors.newFixedThreadPool(4);

        for (ClassBlock block : classBlocks) {
            executor.submit(() -> {
                try {
                    Map<String, String> features = extractFeatures(block);
                    writeCSV(block.className, features);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
        }

        executor.shutdown();
        executor.awaitTermination(5, TimeUnit.MINUTES);
        System.out.println("Done!");
    }

    private static class ClassBlock {
        String className;
        List<String> lines;
        String distributionLine;

        public ClassBlock(String className) {
            this.className = className;
            this.lines = new ArrayList<>();
        }
    }

    private static List<ClassBlock> parseInputFile(String path) throws IOException {
        List<String> lines = Files.readAllLines(Paths.get(path));
        List<ClassBlock> blocks = new ArrayList<>();
        Map<String, String> distributionMap = new HashMap<>();

        boolean inClassSection = false;
        ClassBlock currentBlock = null;

        for (String line : lines) {
            line = line.trim();
            if (line.startsWith("class ") && line.contains(":")) {
                inClassSection = true;
                String className = line.split(":")[1].trim();
                currentBlock = new ClassBlock(className);
                blocks.add(currentBlock);
            }

            if (inClassSection && currentBlock != null && !line.isEmpty()) {
                currentBlock.lines.add(line);
            }

            if (line.startsWith("Distribution:")) {
                inClassSection = false;
            }

            // After "Distribution:" block
            if (!inClassSection && line.startsWith("class ") && line.contains("(")) {
                String[] parts = line.split(":");
                String className = parts[1].split("\\s+")[0].trim();
                distributionMap.put(className, line);
            }
        }

        // Match distribution to each class block
        for (ClassBlock block : blocks) {
            block.distributionLine = distributionMap.get(block.className);
        }

        return blocks;
    }

    private static Map<String, String> extractFeatures(ClassBlock block) {
        Map<String, String> features = new LinkedHashMap<>();
        features.put("class", block.className);

        for (String line : block.lines) {
            if (line.contains("=") && line.contains("accuracy")) {
                String[] metrics = line.split("\\s+");
                for (int i = 0; i < metrics.length - 2; i += 2) {
                    String key = metrics[i];
                    String value = metrics[i + 2];
                    features.put(key.replace("=", ""), value);
                }
            } else if (line.contains("TruePositives")) {
                String[] parts = line.split("\\s+");
                for (int i = 0; i < parts.length - 2; i += 2) {
                    String key = parts[i].replace("=", "");
                    String value = parts[i + 2];
                    features.put(key, value);
                }
            }
        }

        // Add class size and percentage from distribution line
        if (block.distributionLine != null) {
            String[] distParts = block.distributionLine.trim().split("\\s+");
            features.put("Samples", distParts[2]);
            features.put("Percentage", distParts[3].replace("(", "").replace(")", ""));
        }

        return features;
    }

    private static void writeCSV(String className, Map<String, String> data) throws IOException {
        synchronized (LOCK) {
            File file = new File(OUTPUT_PATH);
            boolean writeHeader = !file.exists();

            try (FileWriter writer = new FileWriter(file, true)) {
                if (writeHeader) {
                    for (String key : data.keySet()) {
                        writer.write(key + ",");
                    }
                    writer.write("\n");
                }

                for (String value : data.values()) {
                    writer.write(value + ",");
                }
                writer.write("\n");
            }
        }
    }
}
