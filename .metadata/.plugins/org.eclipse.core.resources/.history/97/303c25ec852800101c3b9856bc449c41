import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.util.*;

public class CSVViewer {
    public static void main(String[] args) {
    	BuildDataset MainClass= new BuildDataset();
    	
        JFrame frame = new JFrame("CSV Viewer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // Read CSV file and get data
        String[][] originalData = readCSV(MainClass.csvPath);
        
        // Columns you want to display
        String[] columns = {"Column 1", "Column 2", "Column 3"};
        
        // Filter columns (e.g., only show Column 1 and Column 3)
        String[][] filteredColumns = filterColumns(originalData, new int[]{0, 2});
        
        // Filter rows (e.g., show rows where Column 2 is "some_value")
        String[][] filteredRows = filterRows(filteredColumns, 1, "some_value");
        
        // Create a DefaultTableModel with the filtered data
        DefaultTableModel model = new DefaultTableModel(filteredRows, columns);
        
        // Create a JTable with the model
        JTable table = new JTable(model);
        
        // Add the table to a JScrollPane
        JScrollPane scrollPane = new JScrollPane(table);
        frame.add(scrollPane);
        
        // Set the size and make the frame visible
        frame.setSize(600, 400);
        frame.setVisible(true);
    }

    // Method to read the CSV file and return the data as a 2D array
    public static String[][] readCSV(String filePath) {
        List<String[]> dataList = new ArrayList<>();
        
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            
            // Read each line from the file
            while ((line = br.readLine()) != null) {
                // Split the line by commas and add it to the data list
                String[] data = line.split(",");
                dataList.add(data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        // Convert the list to a 2D array
        return dataList.toArray(new String[0][0]);
    }

    // Method to filter columns based on given column indices
    public static String[][] filterColumns(String[][] data, int[] columnIndices) {
        List<String[]> filteredData = new ArrayList<>();
        
        for (String[] row : data) {
            String[] filteredRow = new String[columnIndices.length];
            for (int i = 0; i < columnIndices.length; i++) {
                filteredRow[i] = row[columnIndices[i]];
            }
            filteredData.add(filteredRow);
        }
        
        return filteredData.toArray(new String[0][0]);
    }

    // Method to filter rows based on a condition (e.g., value in a specific column)
    public static String[][] filterRows(String[][] data, int columnIndex, String condition) {
        List<String[]> filteredData = new ArrayList<>();
        
        for (String[] row : data) {
            if (row[columnIndex].equals(condition)) {
                filteredData.add(row);
            }
        }
        
        return filteredData.toArray(new String[0][0]);
    }
}

