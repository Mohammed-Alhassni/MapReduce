import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class MapReduce {
    public static void main(String[] args) throws InterruptedException, IOException {
        String samplePath = "/Users/mohmmedmsoud/Desktop/sem2 temp/pds project/SAMPLE3.txt";
        long startNs = System.nanoTime();

        // Extract blocks in parallel
        ExecutorService executor = Executors.newFixedThreadPool(4);  // 4 threads for block extraction
        List<Callable<List<ArrayList<String>>>> tasks = new ArrayList<>();
        tasks.add(() -> BlocksExtractor.extractBlocks(samplePath));

        List<Future<List<ArrayList<String>>>> futures = executor.invokeAll(tasks);
        List<ArrayList<String>> blocks = futures.get(0).get();  // Get the result of block extraction

        // Process each block in parallel
        List<Callable<Void>> mapTasks = new ArrayList<>();
        for (ArrayList<String> block : blocks) {
            mapTasks.add(() -> {
                Mapper.map(block);  // Process each block with MapFun
                return null;
            });
        }
        executor.invokeAll(mapTasks);  // Execute mapping in parallel

        // Process reducing step in parallel
        List<Callable<Void>> reduceTasks = new ArrayList<>();
        for (ArrayList<String> block : blocks) {
            reduceTasks.add(() -> {
                Map<String, Object> classAndFeatures = Mapper.map(block);  // Get the mapped features
                Reducer.reduce(classAndFeatures);  // Write to CSV
                return null;
            });
        }
        executor.invokeAll(reduceTasks);  // Execute reducing in parallel

        executor.shutdown();  // Shut down the executor

        long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);
        System.out.println("Done, took " + durationMs + "ms");
    }
}
