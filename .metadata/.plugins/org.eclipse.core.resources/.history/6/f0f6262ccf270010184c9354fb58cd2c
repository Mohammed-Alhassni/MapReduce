import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class BlocksExtractor {

    public static ArrayList<ArrayList<String>> extractBlocks(String samplePath) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(samplePath));
        ArrayList<ArrayList<String>> allBlocks = new ArrayList<>();
        ArrayList<String> TempData = new ArrayList<>();
        String line;
        boolean isForDistrubtion = false;

        while ((line = reader.readLine()) != null) {
            if (!line.replace(" ", "").equals("")) {

                if (line.contains("class ") && !TempData.isEmpty()) {
                    BufferedReader distrubutionReader = new BufferedReader(new FileReader(samplePath));
                    String dirtrubtionLine;

                    while ((dirtrubtionLine = distrubutionReader.readLine()) != null) {
                        if (!dirtrubtionLine.replace(" ", "").equals("") && dirtrubtionLine.contains("Distribution:")) {
                            isForDistrubtion = true;
                        }

                        if (isForDistrubtion && dirtrubtionLine.contains(TempData.get(0))) {
                            TempData.add(dirtrubtionLine);
                            Mapper.map(TempData);
                            TempData.clear();
                            isForDistrubtion = false;
                            break;
                        }
                    }

                    distrubutionReader.close();

                    if (!line.matches("^class \\d+\\.\\d+: \\w+ \\d+ \\(\\d+\\.\\d+%\\)$")) {
                        TempData.add(line);
                    }

                } else if ((line.matches("^class \\d+\\.\\d+: \\w+$")) && (TempData.isEmpty())) {
                    TempData.add(line);
                } else if (!TempData.isEmpty()) {
                    TempData.add(line);
                }
            }
        }

        reader.close();
//        System.out.println(allBlocks);
        return allBlocks;
    }
}
