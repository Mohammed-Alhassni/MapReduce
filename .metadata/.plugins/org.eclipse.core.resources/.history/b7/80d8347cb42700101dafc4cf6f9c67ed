import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


public class Sample3Tester {
	public static void main(String[] args) throws InterruptedException, IOException {
		String samplePath= "/Users/mohmmedmsoud/Desktop/sem2 temp/pds project/SAMPLE2.txt";
	    BufferedReader reader = new BufferedReader(new FileReader(samplePath));
	    

	    String line;
	    ArrayList<String> TempData= new  ArrayList<>();
	    Boolean isForDistrubtion= false;

	    while ((line = reader.readLine()) !=  null) {
	    	if (!line.replace(" ", "").equals("")) {
	    		

	    		
	    		if (line.contains("class ") && !(TempData.isEmpty())) {
	    			 BufferedReader distrubutionReader = new BufferedReader(new FileReader(samplePath));
	    			 String dirtrubtionLine;
	    			 while ((dirtrubtionLine = distrubutionReader.readLine()) !=  null) {
	    				 	    				 
	    			    	if (!dirtrubtionLine.replace(" ", "").equals("") && dirtrubtionLine.contains("Distribution:")) {	    			    		
	    			    		isForDistrubtion= true;	    			    				
	    			    	}
	    			    	
	    			    	if (isForDistrubtion && dirtrubtionLine.contains(TempData.get(0))) {
    			    			TempData.add(dirtrubtionLine);
    			    			//System.out.println(TempData + "\n");
    			    			MapperFun(TempData);
    			    			TempData= new  ArrayList<>();
    			    			isForDistrubtion= false;
    			    			break;
    			    		}
	    			    	
	    			 } 
	    			 distrubutionReader.close();
	    			 
	    			 if (!line.matches("^class \\d+\\.\\d+: \\w+ \\d+ \\(\\d+\\.\\d+%\\)$")) {
	    				 TempData.add(line);	
	    			 }
	    			 
	    			 
	    					
	    		} else if ((line.matches("^class \\d+\\.\\d+: \\w+$")) && (TempData.isEmpty())) {
	    			TempData.add(line);
	    		} else if (!TempData.isEmpty()) {
	    			TempData.add(line);
	    		}   		
	    	}
	    }  
	    
	    
	    reader.close();
	    
	    
	    
        long startNs = System.nanoTime();


        long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);

        System.out.println("Done, tooks" + durationMs + "ms");
                    
	}


	
	public static Map<String, Object> MapperFun(ArrayList<String> Data) throws IOException {
    Map<String, Object> classAndFeatures = new HashMap<>();
    Map<String, String> featuresMap = new HashMap<>();

    // Flatten all words from input Data using stream and lambda
    List<String> words = Data.stream()
            .flatMap(line -> Arrays.stream(line.split(" |\\.0")))
            .collect(Collectors.toList());

    System.out.println(words);

    // Use IntStream to iterate with index and check for "="
    IntStream.range(0, words.size())
            .filter(i -> words.get(i).replace(" ", "").equals("="))
            .forEach(i -> {
                if (i > 0 && i + 1 < words.size()) {
                    featuresMap.put(words.get(i - 1), words.get(i + 1));
                }
            });

    // Handle Samples and Percentage manually (needs last 2 elements)
    featuresMap.put("Samples", words.get(words.size() - 2));
    featuresMap.put("Percentage", words.get(words.size() - 1).replace(")", "").replace("(", ""));

    // Add to final map using 4th word as key
    classAndFeatures.put(words.get(3), featuresMap);

    // Call Reducer
    ReducerFun(classAndFeatures);

    System.out.println(featuresMap);
    System.out.println(classAndFeatures + "\n");

    return classAndFeatures;
}

	
	public static void ReducerFun(Map<String, Object> classAndFeatures) throws IOException {
    String samplePath = "output.csv";
    File file = new File(samplePath);

    // Extract class name (only one key is assumed)
    String className = classAndFeatures.keySet().stream().findFirst().orElse(null);
    if (className == null) return;

    // Extract feature map
    @SuppressWarnings("unchecked")
    Map<String, String> featuresMap = (Map<String, String>) classAndFeatures.get(className);

    // Get keys in list form
    List<String> featureKeys = new ArrayList<>(featuresMap.keySet());

    // Use try-with-resources to open the file writer (append = true if file exists)
    try (FileWriter writer = new FileWriter(samplePath, file.exists())) {
        if (!file.exists()) {
            System.out.println("New 'Output.csv' has been created");

            // Write header
            writer.append("class");
            featureKeys.forEach(key -> {
                try {
                    writer.append(",").append(key);
                } catch (IOException e) {
                    throw new UncheckedIOException(e);
                }
            });
            writer.append("\n");

            System.out.println("Header added");
        }

        // Write row
        writer.append(className);
        featureKeys.forEach(key -> {
            try {
                writer.append(",").append(featuresMap.get(key));
            } catch (IOException e) {
                throw new UncheckedIOException(e);
            }
        });
        writer.append("\n");

        System.out.println(file.exists() ? "Row added" : "Head and Row added");
    }
}


}
