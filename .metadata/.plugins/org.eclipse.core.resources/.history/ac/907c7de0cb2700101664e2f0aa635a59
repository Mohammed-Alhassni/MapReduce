import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class MapReduce {
    public static void main(String[] args) throws InterruptedException, IOException, ExecutionException {
        String samplePath = "/Users/mohmmedmsoud/Desktop/sem2 temp/pds project/SAMPLE2.txt";
        long startNs = System.nanoTime();

        // Extract blocks in parallel
        ExecutorService executor = Executors.newFixedThreadPool(4);  // 4 threads for block extraction
        List<Callable<Void>> tasks = new ArrayList<>();
        List<ArrayList<String>> blocks = BlocksExtractor.extractBlocks(samplePath);  // Extract the blocks directly

        // Process each block (map + reduce in one task)
        for (ArrayList<String> block : blocks) {
            tasks.add(() -> {
                try {
                    Map<String, Object> features = Mapper.map(block);  // Map the block
                    Reducer.reduce(features);  // Reduce (write to CSV)
                } catch (Exception e) {
                    e.printStackTrace();  // Catch and print any exception
                }
                return null;
            });
        }

        // Execute all tasks in parallel
        executor.invokeAll(tasks);

        // Shutdown the executor
        executor.shutdown();

        long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);
        System.out.println("Done, took " + durationMs + "ms");
    }
}
