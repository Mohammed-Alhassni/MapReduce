import java.io.*;
import java.util.*;
import java.util.concurrent.*;

public class Sample3Tester {
    public static void main(String[] args) throws InterruptedException, IOException {
        String samplePath = "/Users/mohmmedmsoud/Desktop/sem2 temp/pds project/SAMPLE3.txt";
        ExecutorService executorService = Executors.newFixedThreadPool(4); // Using a fixed thread pool with 4 threads

        BufferedReader reader = new BufferedReader(new FileReader(samplePath));
        String line;
        final TempDataWrapper wrapper = new TempDataWrapper(); // Wrapper for TempData
        Boolean isForDistrubtion = false;

        while ((line = reader.readLine()) != null) {
            if (!line.replace(" ", "").equals("")) {
                if (line.contains("class ") && !(wrapper.getTempData().isEmpty())) {
                    // Create a task to process the distribution
                    executorService.submit(() -> processDistribution(samplePath, wrapper));
                    wrapper.getTempData().clear(); // Reset TempData for next class
                } else if ((line.matches("^class \\d+\\.\\d+: \\w+$")) && (wrapper.getTempData().isEmpty())) {
                    wrapper.getTempData().add(line);
                } else if (!wrapper.getTempData().isEmpty()) {
                    wrapper.getTempData().add(line);
                }
            }
        }

        reader.close();
        executorService.shutdown(); // Gracefully shut down the executor service

        long startNs = System.nanoTime();
        long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);
        System.out.println("Done, took " + durationMs + "ms");
    }

    // Wrapper class to hold TempData
    static class TempDataWrapper {
        private List<String> tempData = new ArrayList<>();

        public List<String> getTempData() {
            return tempData;
        }
    }

    public static void processDistribution(String samplePath, TempDataWrapper wrapper) {
        BufferedReader distrubtionReader = null;
        try {
            distrubtionReader = new BufferedReader(new FileReader(samplePath));
            String dirtrubtionLine;
            Boolean isForDistrubtion = false;

            while ((dirtrubtionLine = distrubtionReader.readLine()) != null) {
                if (!dirtrubtionLine.replace(" ", "").equals("") && dirtrubtionLine.contains("Distribution:")) {
                    isForDistrubtion = true;
                }

                if (isForDistrubtion && dirtrubtionLine.contains(wrapper.getTempData().get(0))) {
                    wrapper.getTempData().add(dirtrubtionLine);
                    // Process the TempData in MapperFun
                    try {
                        MapperFun(wrapper.getTempData());
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    wrapper.getTempData().clear(); // Clear after processing
                    isForDistrubtion = false;
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (distrubtionReader != null) {
                    distrubtionReader.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static Map<String, Object> MapperFun(ArrayList<String> Data) throws FileNotFoundException, IOException {
        Map<String, Object> classAndFeatures = new HashMap<>();
        Map<String, String> featuresMap = new HashMap<>();
        ArrayList<String> words = new ArrayList<>();

        // Split the data into words
        for (int i = 0; i < Data.size(); i++) {
            String[] split = Data.get(i).split(" |\\.0");
            for (String word : split) {
                words.add(word);
            }
        }

        int iterationIndex = 0;

        // Map the features
        for (String feature : words) {
            if (feature.replace(" ", "").equals("=")) {
                featuresMap.put(words.get(iterationIndex - 1), words.get(iterationIndex + 1));
            }
            iterationIndex++;
        }

        featuresMap.put("Samples", words.get(words.size() - 2));
        featuresMap.put("Percentage", words.get(words.size() - 1).replace(")", "").replace("(", ""));
        classAndFeatures.put(words.get(3), featuresMap);

        // Call ReducerFun in the same thread (for simplicity)
        ReducerFun(classAndFeatures);

        System.out.println(featuresMap);
        System.out.println(classAndFeatures + "\n");

        return classAndFeatures;
    }

    public static void ReducerFun(Map<String, Object> classAndFeatures) throws FileNotFoundException, IOException {
        String samplePath = "output.csv";
        String className = null;
        File file = new File(samplePath);

        // Set to extract the class name of the Map (classAndFeature Map)
        Set<String> classNameSet = new HashSet<>();
        classNameSet = classAndFeatures.keySet();

        for (String setELement : classNameSet) {
            className = setELement;
        }

        if (!file.exists()) {
            try (FileWriter writer = new FileWriter(samplePath)) {
                System.out.println("New 'Output.csv' has been created");

                Map<String, String> featuresMap = new HashMap<>();
                Object interMediate = classAndFeatures.get(className);
                featuresMap = (Map<String, String>) interMediate;
                ArrayList<String> featureMapKeys = new ArrayList<>();

                // Write header
                writer.append("class");
                for (String key : featuresMap.keySet()) {
                    writer.append("," + key);
                }

                writer.append("\n");

                // Write first row
                for (String key : featuresMap.keySet()) {
                    featureMapKeys.add(key);
                }

                writer.append(className);
                for (String key : featureMapKeys) {
                    writer.append("," + featuresMap.get(key));
                }
                writer.append("\n");

                System.out.println("Header and Row added");
            }
        } else if (file.exists()) {
            try (FileWriter writer = new FileWriter(samplePath, true)) {
                Map<String, String> featuresMap = new HashMap<>();
                Object interMediate = classAndFeatures.get(className);
                featuresMap = (Map<String, String>) interMediate;
                ArrayList<String> featureMapKeys = new ArrayList<>();

                // Write other rows
                for (String key : featuresMap.keySet()) {
                    featureMapKeys.add(key);
                }

                writer.append(className);
                for (String key : featureMapKeys) {
                    writer.append("," + featuresMap.get(key));
                }
                writer.append("\n");

                System.out.println("Row added");
            }
        }
    }
}
